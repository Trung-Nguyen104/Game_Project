input
{
	FPVector2 mousePosition;
	Button PickUpItem;
	Button DropItem;
	Button InteracAction;
	Button RightMouseClick;
	Int32 SelectItem;
}

#define PLAYER_COUNT 8
#pragma max_players PLAYER_COUNT

global
{
	list<entity_ref> playerEntityRef;
}

component PlayerInfo
{
	player_ref PlayerRef;
	Int32 PlayerSkinColor;

	[Header("Inventory")]
	array<ItemInfo>[4] Inventory;
	bool HadWeapon;
	Int32 CurrSelectItem;
}

component MousePointerInfo
{
	FPVector2 targetPosition;
	FP AimAngle;
}

component ItemInfo
{
	ItemProfile Item;
	[Header("If Item Is Gun")]
	Int32 GunAmmo;
	AssetRef<EntityPrototype> BulletPrototype;
}

component ItemSpawner
{
	AssetRef<ItemSpawnPosition> ItemSpawnPosition;
	array<Positions>[30] Positions;
	array<ItemSpawn>[3] Item;
}

component BulletInfo
{
	player_ref OwnerPlayer;
	FP Damage;
	FP BulletTimeOut;
}

component PlayerRoleManager
{
	array<RoleProfile>[8] RoleProfiles;
}

component TaskInfo
{
	TaskType TaskType;
	bool IsTaskCompleted;
}

singleton component GameSession
{	
	GameState GameState;
}

struct Positions
{
	FPVector2 Position;
	bool isSpawned;
}

struct ItemSpawn
{
	ItemProfile ItemProfile;
	Int32 ItemQuantity;
}

struct ItemProfile
{
	AssetRef<ItemData> ItemData;
	AssetRef<EntityPrototype> ItemPrototype;
}

struct RoleProfile
{
	PlayerRole PlayerRole;
	Int32 RoleQuantity;
}

enum PlayerRole
{
	None,
	Monster, 
	Scientist, 
	Engineer, 
	Doctor, 
	Astronaut, 
	Soldier, 
	Terrorist, 
	Detective
}

enum PlayerStatus
{
	Alive,
	Death,
	Ghost,
	Immunity
}

enum GameState
{
	Waiting,
	GameStarting,
	GameStarted,
	GameEnded,
}

enum TaskType
{
	WiresEnergy,
	EnterCodes,
	RememberIndexs
}

event PickUpItem
{
	player_ref PlayerRef;
	Int32 ItemSlotIndex;
	AssetRef<ItemData> ItemPickUpData;
}

event SelectItem
{
	player_ref PlayerRef;
	Int32 SelectItem;
}

event RemoveItem
{
	player_ref PlayerRef;
	Int32 CurrSelectItem;
	AssetRef<ItemData> ItemDropData;
}

event IsMoving 
{
	player_ref PlayerRef;
	bool isMoving;
}

event IsHighLight
{
	player_ref PlayerRef;
	entity_ref TaskRef;
	bool IsEnter;
}

event InitiatingTask
{
	player_ref PlayerRef;
	entity_ref TaskRef;
	TaskType TaskType;
}

signal OnPickUpItem (FPVector2 Position);
signal OnUseItem (ItemInfo ItemInfo);
signal OnLoadPosition (FPVector2 Position);
